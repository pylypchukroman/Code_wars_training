{"version":3,"sources":["index.js"],"names":["makeNegative","num","positiveSum","arr","positives","i","length","push","total","reduce","acc","descendingOrder","n","console","log","Array","from","String","Number","sort","a","b","str","join","nbYear","p0","percent","aug","p","oddOrEven","array","minMax","Math","min","max","longestWord","string","split","longest","word","makenumb","x","r","cos","abs","arithmetic","operator","findShort","s","newArr","map","elem","removeSmallest","numbers","newNumbers","indexOfMin","indexOf","splice","smallEnough","limit","every","value","rowWeights","team1","team2","repeater","repeat","prototype","toJadenCase","charAt","toUpperCase","slice"],"mappings":"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","file":"src.9a03ac86.js","sourceRoot":"../src","sourcesContent":["//Jaden Casing Strings 7 kyu\n\nString.prototype.toJadenCase = function (str) {\n  return this.split(' ')\n    .map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(' ');\n};\n\n//Return Negative 7 kyu\nfunction makeNegative(num) {\n  if (num < 0) {\n    return num;\n  } else if (num === 0) {\n    return num;\n  }\n  return (num = num * -1);\n}\n\n//Sum of positive 7 kyu\nfunction positiveSum(arr) {\n  let positives = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      positives.push(arr[i]);\n    }\n  }\n  //     console.log(positives);\n  const total = positives.reduce((acc, num) => {\n    return acc + num;\n  }, 0);\n  //     console.log(total);\n  return total;\n}\n\n//Descending Order 7 kyu\nfunction descendingOrder(n) {\n  console.log(n);\n  let arr = Array.from(String(n), Number);\n  console.log(arr);\n  arr = [...arr].sort((a, b) => b - a);\n  console.log(arr);\n  const str = +arr.join('');\n  console.log(str);\n  return str;\n}\n\n//Growth of a Population 7 kyu\nfunction nbYear(p0, percent, aug, p) {\n  let i = 0;\n  while (true) {\n    if (p0 >= p) {\n      return i;\n    }\n    p0 = p0 * (1 + percent / 100) + aug;\n    i++;\n  }\n}\n//Odd or Even? 7 kyu\nfunction oddOrEven(array) {\n  if (array.length == 0) {\n    return 'even';\n  }\n  const total = array.reduce((acc, num) => {\n    return acc + num;\n  });\n  console.log(total);\n  if (total % 2) {\n    return 'odd';\n  }\n  return 'even';\n}\n//The highest profit wins! 7 kyu\nfunction minMax(arr) {\n  return [Math.min(...arr), Math.max(...arr)];\n}\n\nfunction longestWord(string) {\n  const str = string.split(' ');\n  let longest = 0;\n  let word = null;\n  for (let i = 0; i < str.length - 1; i++) {\n    if (longest < str[i].length) {\n      longest = str[i].length;\n      word = str[i];\n    }\n  }\n  return word;\n}\n\nlongestWord('The quick brown fox jumped over the lazy dog');\n\nfunction makenumb(n, x) {\n  let y = 0;\n  for (let i = n; i <= x; i++) {\n    r = i / i + 1 - Math.cos(i) * Math.abs(x);\n    console.log(r);\n  }\n}\nmakenumb(2, 5);\n\n//Make a function that does arithmetic!\nfunction arithmetic(a, b, operator) {\n  switch ((a, b, operator)) {\n    case 'add':\n      return a + b;\n      break;\n\n    case 'subtract':\n      return a - b;\n      break;\n\n    case 'multiply':\n      return a * b;\n      break;\n\n    case 'divide':\n      return a / b;\n      break;\n  }\n}\n\n//Shortest Word\nfunction findShort(s) {\n  const arr = s.split(' ');\n  const newArr = arr.map(elem => {\n    return elem.length;\n  });\n  return Math.min(...newArr);\n}\n\n//Remove the minimum\nfunction removeSmallest(numbers) {\n  let newNumbers = [...numbers];\n  let indexOfMin = newNumbers.indexOf(Math.min(...newNumbers));\n  newNumbers.splice(indexOfMin, 1);\n  return newNumbers;\n}\n\n//Small enough? - Beginner\nfunction smallEnough(a, limit) {\n  return a.every(value => value <= limit);\n}\n\n//Row Weights\nfunction rowWeights(array) {\n  let team1 = 0;\n  let team2 = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (i % 2 === 0) {\n      team1 += array[i];\n    } else {\n      team2 += array[i];\n    }\n  }\n  return [team1, team2];\n}\n\n//Thinkful - String Drills: Repeater\nfunction repeater(string, n) {\n  return string.repeat(n);\n}\n"]}